// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @unique @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  app           App[]
  homeys        Homey[]
  homeyToken    HomeyToken?
  apiKeys       ApiKey[]

  @@map("users")
}

model ApiKey {
  id         String    @id @default(cuid())
  name       String
  key        String    @unique
  userId     String    @map("user_id")
  scopes     String?   @db.Text
  createdAt  DateTime  @default(now()) @map("created_at")
  lastUsedAt DateTime? @map("last_used_at")
  expiresAt  DateTime? @map("expires_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model HomeyToken {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id")
  accessToken   String   @unique @map("access_token")
  refreshToken  String?  @unique @map("refresh_token")
  expires       DateTime @map("expires_at")
  encryptionKey String?  @map("encryption_key")
  User          User?    @relation(fields: [userId], references: [id])

  @@map("homey_tokens")
}

model Homey {
  id                 String     @id @default(cuid())
  homeyId            String     @map("homey_id")
  name               String?
  remoteUrl          String?    @map("remote_url") @db.Text
  localUrl           String?    @map("local_url") @db.Text
  remoteForwardedUrl String?    @map("remote_forwarded_url") @db.Text
  User               User?      @relation(fields: [userId], references: [id])
  userId             String?    @map("user_id")
  eventKey           String?    @map("event_key")
  sessionToken       String?    @map("session_token") @db.Text
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @default(now()) @updatedAt @map("updated_at")
  HomeyApp           HomeyApp[]

  @@unique([homeyId, userId])
  @@map("homey")
}

model HomeyApp {
  id         String   @id @default(cuid())
  homeyId    String   @map("homey_id")
  appId      String   @map("app_id")
  name       String
  version    String
  origin     String
  channel    String?
  autoUpdate Boolean  @default(true) @map("auto_update")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  homey      Homey    @relation(fields: [homeyId], references: [id], onDelete: Cascade)

  @@unique([homeyId, appId])
  @@map("homey_apps")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model App {
  id          String       @id @default(cuid())
  authorId    String       @map("author_id")
  name        String
  description String?      @db.Text
  image       String?
  identifier  String       @unique
  versions    AppVersion[]
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("apps")
}

model AppVersion {
  id           String   @id @default(cuid())
  appId        String   @map("app_id")
  version      String
  file         String
  experimental Boolean
  changelog    String?  @db.Text
  approved     Boolean
  available    Boolean
  env          String?  @db.Text
  appinfo      Json?    @map("app_info")
  publishedAt  DateTime @map("published_at")
  app          App      @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@unique([appId, version])
  @@map("app_versions")
}
